<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haicheng的博客</title>
    <description>这是haicheng的博客，里面是技术跟感悟的东西。</description>
    <link>https://chchmlml.github.io/</link>
    <atom:link href="https://chchmlml.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 02 Dec 2024 18:21:06 +0800</pubDate>
    <lastBuildDate>Mon, 02 Dec 2024 18:21:06 +0800</lastBuildDate>
    <generator>Jekyll v4.3.4</generator>
    
      <item>
        <title>每天学习笔记【2】</title>
        <description>&lt;h1 id=&quot;第五周&quot;&gt;第五周&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;20170911&lt;/p&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;《互联网时代的项目管理术》读书第二章
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;20170912&lt;/p&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PHP的master与worker,master不负责处理请求，worker直接处理，master进程不断调用epoll_wait和getsockopt是用来异步处理信号事件和定时器事件.
mybatis二级缓存问题,sqlsession级别；namespace级别。脏读情况。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;20170913&lt;/p&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;之前的读书笔记整理进来
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 02 Dec 2024 13:13:26 +0800</pubDate>
        <link>https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2024/12/02/everyday-learn-2.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2024/12/02/everyday-learn-2.html</guid>
        
        <category>Ted演讲</category>
        
        <category>每日积累</category>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>2018年了，做些展望吧</title>
        <description>
</description>
        <pubDate>Thu, 22 Feb 2018 13:27:45 +0800</pubDate>
        <link>https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2018/02/22/happy-new-year.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2018/02/22/happy-new-year.html</guid>
        
        <category>生活</category>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>读书笔记《高性能mysql》</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/posts/读《高性能mysql》.png&quot; alt=&quot;高性能mysql&quot; title=&quot;高性能mysql&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 17:20:09 +0800</pubDate>
        <link>https://chchmlml.github.io/%E8%AF%BB%E4%B9%A6/2017/09/13/ha-mysql.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E8%AF%BB%E4%B9%A6/2017/09/13/ha-mysql.html</guid>
        
        <category>mysql</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>读书笔记《代码整洁之道》</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/posts/代码整洁之道.png&quot; alt=&quot;代码整洁之道&quot; title=&quot;代码整洁之道&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 17:20:09 +0800</pubDate>
        <link>https://chchmlml.github.io/%E8%AF%BB%E4%B9%A6/2017/09/13/codes.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E8%AF%BB%E4%B9%A6/2017/09/13/codes.html</guid>
        
        <category>编程习惯</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>读书笔记《互联网时代的项目管理术》</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/posts/互联网时代的项目管理术.png&quot; alt=&quot;互联网时代的项目管理术&quot; title=&quot;互联网时代的项目管理术&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 17:13:16 +0800</pubDate>
        <link>https://chchmlml.github.io/%E8%AF%BB%E4%B9%A6/2017/09/13/project-manage-at-internet-era.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E8%AF%BB%E4%B9%A6/2017/09/13/project-manage-at-internet-era.html</guid>
        
        <category>管理</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>活在北京/Now Fucking Live In Beijing</title>
        <description>&lt;p&gt;记录下今天：现在的时间是【2017-09-09 10:55:33】，在北京，生活枯燥而且动荡。如果说有人觉得无聊的生活才可怕，那么不知所措的生活是否更加可怕？&lt;/p&gt;
&lt;h3 id=&quot;今天我焦虑的是&quot;&gt;今天我焦虑的是：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;缺钱&lt;/li&gt;
  &lt;li&gt;买房&lt;/li&gt;
  &lt;li&gt;未来的不可预知&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;你好&quot;&gt;你好&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不知道下次你看到是什么感觉，请留下你的现状+时间。&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Sep 2017 10:55:33 +0800</pubDate>
        <link>https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2017/09/09/about-take-a-house-in-beijing.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2017/09/09/about-take-a-house-in-beijing.html</guid>
        
        <category>买房子</category>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>我的项目总结</title>
        <description>&lt;h1 id=&quot;pps广告平台--移动投放平台&quot;&gt;pps广告平台 &amp;amp; 移动投放平台&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;定义  &lt;br /&gt;
   作为公司的主要收入，广告系统涵盖了很多。解决了广告排期录入、分发投放的问题，作为业务系统配置式的项目管理
把系统的扩展性体现的特别好，在当时我觉得还是相当成熟的。
   我后期参与的任务流的处理方式我认为作为广告业务系统结合OA、ERP是很棒的处理方式。   &lt;br /&gt;
   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;移动投放平台&lt;/code&gt;即时的投放处理系统，依靠php+lvs+memcached的方式进行处理，这种架构可以说提供了很高qps的性能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;包含的模块&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;素材录入&lt;/li&gt;
    &lt;li&gt;排期处理&lt;/li&gt;
    &lt;li&gt;任务提醒&lt;/li&gt;
    &lt;li&gt;邮件提醒&lt;/li&gt;
    &lt;li&gt;广告投放&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;解决问题&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;录入&lt;/li&gt;
    &lt;li&gt;排期处理&lt;/li&gt;
    &lt;li&gt;高qps、响应低延迟&lt;/li&gt;
    &lt;li&gt;容灾处理&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;京东旅游邮轮平台--京东众包h5平台&quot;&gt;京东旅游邮轮平台 &amp;amp; 京东众包h5平台&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;不提也罢。。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;微博应用家平台--微博超级粉丝通--微博ka项目群&quot;&gt;微博应用家平台 &amp;amp; 微博超级粉丝通 &amp;amp; 微博KA项目群&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;定义  &lt;br /&gt;
    这个时候随着业务上对产品线的区分，我们对广告做基于品牌、基于流量的产品业务线策略，从而
    产生了KA（品牌）和To广告商（流量的）的两个产品。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;模块&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;素材录入&lt;/li&gt;
    &lt;li&gt;排期处理&lt;/li&gt;
    &lt;li&gt;任务&lt;/li&gt;
    &lt;li&gt;提醒&lt;/li&gt;
    &lt;li&gt;消息&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;解决的问题
不同于平台、产品类的项目，业务系统始终要满足业务方需求，所有响应时间、qps指标并不是最核心，稳定性
确实更重要。
我觉得，这个系统更像是一个集装箱，或者是适配器，向上要兼容业务需求，向下要合理的提供数据结构、下发
策略，还要处理兼容基于微博的对象和微博，十分头痛。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;待续。。。&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Aug 2017 11:19:59 +0800</pubDate>
        <link>https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2017/08/25/my-career.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2017/08/25/my-career.html</guid>
        
        <category>总结</category>
        
        <category>项目</category>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>面试题目收集1</title>
        <description>&lt;h3 id=&quot;什么是内存泄露什么引起的&quot;&gt;什么是内存泄露？什么引起的&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;内存泄漏是因为一块被分配内存既不能被使用，也不能被回收，直到进程结束。
原理上是不合理的内存使用造成变量不能释放；资源不释放，具体原因还看情况。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ip地址可以被伪造吗&quot;&gt;ip地址可以被伪造吗？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;开发层面很难，因为ip在传输层，而应用层面的修改比较容易。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;有100万个奖品没人可中3次怎么办&quot;&gt;有100万个奖品，没人可中3次，怎么办？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;这个问题的关键解决的点有两个，有限资源读写更新一致的问题，也就是锁；并发的处理。
读写更新涉及到脏读、表锁一致性，是否允许不一致的情况，是否用分布式所，数据量太大是否需要用到异步；
并发的问题负载均衡，增加qps能力，缓存的应用。
总之缓存、异步、分布式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;btree索引与hash索引的长度复杂度为什么不用hash索引&quot;&gt;btree索引与hash索引的长度复杂度？为什么不用hash索引？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;O(log(n))，O(1)
因为hash是散列的，不支持范围查找。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;memcache跟redis的区别&quot;&gt;memcache跟redis的区别&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;我觉得这两个东西不该一起比较，应该算两个对于KV存储的阶段，memcache进本满足我们高效，
要求，但是不能持久化、分布式支持不够问题还是要redis更好，对于各种类型的查询复杂度优化，
高可用性的支持更好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;php快速输出响应&quot;&gt;php快速输出响应&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;fastcgi_finish_request()，会立刻断开http连接并返回输出，支持php-fpm的fastcgi模式，
Apache可以用 ob_end_flush(); ob_start();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;怎么对系统的qps进行优化&quot;&gt;怎么对系统的QPS进行优化&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;提高QPS可以从水平和垂直两个反面进行，水平扩展机器，垂直可采用增加一步特性（减少耗时处理）、减少数据库交互、优化业务逻辑。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mysql查询优化有什么心得&quot;&gt;mysql查询优化有什么心得&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;索引、关联查询、返回列优化
是否可以将一个复杂查询分成多个简单查询 
优化COUNT()查询 
优化关联查询&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 22 Aug 2017 10:44:29 +0800</pubDate>
        <link>https://chchmlml.github.io/%E6%8A%80%E6%9C%AF/2017/08/22/about-interview-question-1.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E6%8A%80%E6%9C%AF/2017/08/22/about-interview-question-1.html</guid>
        
        <category>面试总结</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>php与系统性能优化总结</title>
        <description>&lt;h1 id=&quot;原则&quot;&gt;原则&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;优化不可脱离业务
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;前端优化&quot;&gt;前端优化&lt;/h1&gt;

&lt;h3 id=&quot;减少http请求&quot;&gt;减少http请求&lt;/h3&gt;
&lt;h3 id=&quot;浏览器缓存&quot;&gt;浏览器缓存&lt;/h3&gt;
&lt;h3 id=&quot;cdn分布式存储前端资源&quot;&gt;CDN分布式存储前端资源&lt;/h3&gt;
&lt;h3 id=&quot;多域名访问&quot;&gt;多域名访问&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;原因一：浏览器对同一域名的并行请求数有上限，多个域名则支持更多并行请求
原因二：使用同一域名的时候无用的 cookie 简直是噩梦
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;数据压缩&quot;&gt;数据压缩&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gzip压缩
资源编译压缩
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;首页优化&quot;&gt;首页优化&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;基础加载、后期渲染
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;nginx优化&quot;&gt;Nginx优化&lt;/h1&gt;

&lt;h3 id=&quot;nginx配置优化&quot;&gt;Nginx配置优化&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;进程数
进程文件打开最大数
多路复用
gzip压缩
静态资源缓存（动态也支持）
开启长连接
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tcpip-网络协议配置优化&quot;&gt;tcp/ip 网络协议配置优化&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这边不太熟悉
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;linux系统优化&quot;&gt;linux系统优化&lt;/h3&gt;

&lt;h1 id=&quot;php优化&quot;&gt;php优化&lt;/h1&gt;

&lt;h3 id=&quot;php7升级&quot;&gt;php7升级？&lt;/h3&gt;
&lt;h3 id=&quot;opcode缓存&quot;&gt;opcode缓存&lt;/h3&gt;
&lt;h3 id=&quot;代码伪编译&quot;&gt;代码伪编译&lt;/h3&gt;
&lt;h3 id=&quot;模板编译&quot;&gt;模板编译&lt;/h3&gt;
&lt;h3 id=&quot;xhprof&quot;&gt;xhprof&lt;/h3&gt;

&lt;h1 id=&quot;业务优化&quot;&gt;业务优化&lt;/h1&gt;

&lt;h3 id=&quot;扩展开放修改封闭&quot;&gt;扩展开放、修改封闭&lt;/h3&gt;
&lt;h3 id=&quot;异步缓存分布式&quot;&gt;异步、缓存、分布式&lt;/h3&gt;
&lt;h3 id=&quot;静态化&quot;&gt;静态化&lt;/h3&gt;
&lt;h3 id=&quot;业务解耦&quot;&gt;业务解耦&lt;/h3&gt;

&lt;h1 id=&quot;mysql优化&quot;&gt;mysql优化&lt;/h1&gt;

&lt;h3 id=&quot;部署&quot;&gt;部署&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;慢查询日志收集
nosql
并发数
连接时间
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;开发&quot;&gt;开发&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;innodb表引擎
主键索引
字段优化
explain应用
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;缓存优化&quot;&gt;缓存优化&lt;/h1&gt;

&lt;h3 id=&quot;多级缓存&quot;&gt;多级缓存&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;请求内缓存
本地缓存
分布式缓存
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;#redis
    多实例化
    内存优化
    hash使用&lt;/p&gt;

&lt;h1 id=&quot;服务器优化&quot;&gt;服务器优化&lt;/h1&gt;

&lt;h3 id=&quot;多进程&quot;&gt;多进程&lt;/h3&gt;
&lt;h3 id=&quot;减少上下文切换&quot;&gt;减少上下文切换&lt;/h3&gt;
&lt;h3 id=&quot;多路复用&quot;&gt;多路复用&lt;/h3&gt;
&lt;h3 id=&quot;减少系统调用&quot;&gt;减少系统调用&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strace统计调用次数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 14 Aug 2017 14:01:20 +0800</pubDate>
        <link>https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2017/08/14/optimization-performance-with-php.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E9%9A%8F%E7%AC%94/2017/08/14/optimization-performance-with-php.html</guid>
        
        <category>redis</category>
        
        <category>读书笔记</category>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>HashMap 和 HashTable 源码学习和面试总结</title>
        <description>&lt;h1 id=&quot;java集合概述&quot;&gt;Java集合概述&lt;/h1&gt;

&lt;p&gt;本文重点总结HashMap，HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。&lt;/p&gt;

&lt;p&gt;HashMap是非线程安全的，只用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。&lt;/p&gt;

&lt;p&gt;HashMap 实现了Serializable接口，因此它支持序列化。&lt;/p&gt;

&lt;p&gt;HashMap还实现了Cloneable接口，故能被克隆。&lt;/p&gt;

&lt;h1 id=&quot;hashmap介绍&quot;&gt;HashMap介绍&lt;/h1&gt;

&lt;h3 id=&quot;hashmap有四个构造方法方法中有两个很重要的参数初始容量和加载因子&quot;&gt;HashMap有四个构造方法，方法中有两个很重要的参数：初始容量和加载因子&lt;/h3&gt;
&lt;p&gt;这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（默认为16），加载因子是哈希表当前key的数量和容量的比值，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表提前进行 resize 操作（即扩容）。如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），严重浪费。&lt;/p&gt;

&lt;h1 id=&quot;关于hashmap的几个经典问题&quot;&gt;关于HashMap的几个经典问题&lt;/h1&gt;

&lt;h3 id=&quot;说下hashmap的-扩容机制&quot;&gt;说下hashmap的 扩容机制？&lt;/h3&gt;
&lt;p&gt;前面说了，hashmap的构造器里指明了两个对于理解HashMap比较重要的两个参数 int initialCapacity, float loadFactor,这两个参数会影响HashMap效率，HashMap底层采用的散列数组实现，利用initialCapacity这个参数我们可以设置这个数组的大小，也就是散列桶的数量，但是如果需要Map的数据过多，在不断的add之后，这些桶可能都会被占满，这是有两种策略，一种是不改变Capacity，因为即使桶占满了，我们还是可以利用每个桶附带的链表增加元素。&lt;/p&gt;

&lt;h3 id=&quot;hashmap的key和value都能为null么如果k能为null那么它是怎么样查找值的&quot;&gt;HashMap的key和value都能为null么？如果k能为null，那么它是怎么样查找值的？&lt;/h3&gt;
&lt;p&gt;如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。记住，key为null的键值对永远都放在以table[0]为头结点的链表中。&lt;/p&gt;

&lt;h3 id=&quot;hashmap中put值的时候如果发生了冲突是怎么处理的&quot;&gt;HashMap中put值的时候如果发生了冲突，是怎么处理的？&lt;/h3&gt;
&lt;p&gt;JDK使用了链地址法，hash表的每个元素又分别链接着一个单链表，元素为头结点，如果不同的key映射到了相同的下标，那么就使用头插法，插入到该元素对应的链表。&lt;/p&gt;

&lt;h3 id=&quot;hashtable和hashmap的区别有哪些&quot;&gt;HashTable和HashMap的区别有哪些？&lt;/h3&gt;
&lt;p&gt;HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。&lt;/p&gt;

&lt;p&gt;理解HashMap是Hashtable的轻量级实现（非线程安全的实现，hashtable是非轻量级，线程安全的），都实现Map接口，主要区别在于：&lt;/p&gt;

&lt;p&gt;1、由于HashMap非线程安全，在只有一个线程访问的情况下，效率要高于HashTable&lt;/p&gt;

&lt;p&gt;2、HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。&lt;/p&gt;

&lt;p&gt;3、HashMap把Hashtable的contains方法去掉了，改成containsValue和containsKey。因为contains方法容易让人引起误解。&lt;/p&gt;

&lt;p&gt;4、Hashtable继承自陈旧的Dictionary类，而HashMap是Java1.2引进的Map 的一个实现。&lt;/p&gt;

&lt;p&gt;5、Hashtable和HashMap扩容的方法不一样，HashTable中hash数组默认大小11，扩容方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数，增加为原来的2倍，没有加1。&lt;/p&gt;

&lt;h1 id=&quot;hashmap-和-hashtable-比较&quot;&gt;HashMap 和 HashTable 比较&lt;/h1&gt;

&lt;p&gt;HashTable同样是基于哈希表实现的，其实类似HashMap，只不过有些区别，HashTable同样每个元素是一个key-value对，其内部也是通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。&lt;/p&gt;

&lt;p&gt;HashTable 是线程安全的，能用于多线程环境中。Hashtable同样也实现了Serializable接口，支持序列化，也实现了Cloneable接口，能被克隆。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24338517&quot;&gt;源博&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 09:26:03 +0800</pubDate>
        <link>https://chchmlml.github.io/%E6%8A%80%E6%9C%AF/2017/08/08/java-hashmap.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E6%8A%80%E6%9C%AF/2017/08/08/java-hashmap.html</guid>
        
        <category>java</category>
        
        
        <category>技术</category>
        
      </item>
    
  </channel>
</rss>
