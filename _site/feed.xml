<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haicheng的博客</title>
    <description>这是haicheng的博客，里面是技术跟感悟的东西。</description>
    <link>https://chchmlml.github.io/</link>
    <atom:link href="https://chchmlml.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 07 Sep 2017 15:08:15 +0800</pubDate>
    <lastBuildDate>Thu, 07 Sep 2017 15:08:15 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>面试题目收集1</title>
        <description>&lt;h3 id=&quot;什么是内存泄露什么引起的&quot;&gt;什么是内存泄露？什么引起的&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;内存泄漏是因为一块被分配内存既不能被使用，也不能被回收，直到进程结束。
原理上是不合理的内存使用造成变量不能释放；资源不释放，具体原因还看情况。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ip地址可以被伪造吗&quot;&gt;ip地址可以被伪造吗？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;开发层面很难，因为ip在传输层，而应用层面的修改比较容易。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;有100万个奖品没人可中3次怎么办&quot;&gt;有100万个奖品，没人可中3次，怎么办？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;这个问题的关键解决的点有两个，有限资源读写更新一致的问题，也就是锁；并发的处理。
读写更新涉及到脏读、表锁一致性，是否允许不一致的情况，是否用分布式所，数据量太大是否需要用到异步；
并发的问题负载均衡，增加qps能力，缓存的应用。
总之缓存、异步、分布式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;btree索引与hash索引的长度复杂度为什么不用hash索引&quot;&gt;btree索引与hash索引的长度复杂度？为什么不用hash索引？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;O(log(n))，O(1)
因为hash是散列的，不支持范围查找。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;memcache跟redis的区别&quot;&gt;memcache跟redis的区别&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;我觉得这两个东西不该一起比较，应该算两个对于KV存储的阶段，memcache进本满足我们高效，
要求，但是不能持久化、分布式支持不够问题还是要redis更好，对于各种类型的查询复杂度优化，
高可用性的支持更好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;php快速输出响应&quot;&gt;php快速输出响应&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;fastcgi_finish_request()，会立刻断开http连接并返回输出，支持php-fpm的fastcgi模式，
Apache可以用 ob_end_flush(); ob_start();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;怎么对系统的qps进行优化&quot;&gt;怎么对系统的QPS进行优化&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;提高QPS可以从水平和垂直两个反面进行，水平扩展机器，垂直可采用增加一步特性（减少耗时处理）、减少数据库交互、优化业务逻辑。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mysql查询优化有什么心得&quot;&gt;mysql查询优化有什么心得&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;索引、关联查询、返回列优化
是否可以将一个复杂查询分成多个简单查询 
优化COUNT()查询 
优化关联查询&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 22 Aug 2017 10:44:29 +0800</pubDate>
        <link>https://chchmlml.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/2017/08/22/about-interview-question-1.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/2017/08/22/about-interview-question-1.html</guid>
        
        
        <category>面试总结</category>
        
      </item>
    
      <item>
        <title>php与系统性能优化总结</title>
        <description>&lt;h1 id=&quot;原则&quot;&gt;原则&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;优化不可脱离业务
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;前端优化&quot;&gt;前端优化&lt;/h1&gt;

&lt;h3 id=&quot;减少http请求&quot;&gt;减少http请求&lt;/h3&gt;
&lt;h3 id=&quot;浏览器缓存&quot;&gt;浏览器缓存&lt;/h3&gt;
&lt;h3 id=&quot;cdn分布式存储前端资源&quot;&gt;CDN分布式存储前端资源&lt;/h3&gt;
&lt;h3 id=&quot;多域名访问&quot;&gt;多域名访问&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;原因一：浏览器对同一域名的并行请求数有上限，多个域名则支持更多并行请求
原因二：使用同一域名的时候无用的 cookie 简直是噩梦
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;数据压缩&quot;&gt;数据压缩&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gzip压缩
资源编译压缩
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;首页优化&quot;&gt;首页优化&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;基础加载、后期渲染
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;nginx优化&quot;&gt;Nginx优化&lt;/h1&gt;

&lt;h3 id=&quot;nginx配置优化&quot;&gt;Nginx配置优化&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;进程数
进程文件打开最大数
多路复用
gzip压缩
静态资源缓存（动态也支持）
开启长连接
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tcpip-网络协议配置优化&quot;&gt;tcp/ip 网络协议配置优化&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这边不太熟悉
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;linux系统优化&quot;&gt;linux系统优化&lt;/h3&gt;

&lt;h1 id=&quot;php优化&quot;&gt;php优化&lt;/h1&gt;

&lt;h3 id=&quot;php7升级&quot;&gt;php7升级？&lt;/h3&gt;
&lt;h3 id=&quot;opcode缓存&quot;&gt;opcode缓存&lt;/h3&gt;
&lt;h3 id=&quot;代码伪编译&quot;&gt;代码伪编译&lt;/h3&gt;
&lt;h3 id=&quot;模板编译&quot;&gt;模板编译&lt;/h3&gt;
&lt;h3 id=&quot;xhprof&quot;&gt;xhprof&lt;/h3&gt;

&lt;h1 id=&quot;业务优化&quot;&gt;业务优化&lt;/h1&gt;

&lt;h3 id=&quot;扩展开放修改封闭&quot;&gt;扩展开放、修改封闭&lt;/h3&gt;
&lt;h3 id=&quot;异步缓存分布式&quot;&gt;异步、缓存、分布式&lt;/h3&gt;
&lt;h3 id=&quot;静态化&quot;&gt;静态化&lt;/h3&gt;
&lt;h3 id=&quot;业务解耦&quot;&gt;业务解耦&lt;/h3&gt;

&lt;h1 id=&quot;mysql优化&quot;&gt;mysql优化&lt;/h1&gt;

&lt;h3 id=&quot;部署&quot;&gt;部署&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;慢查询日志收集
nosql
并发数
连接时间
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;开发&quot;&gt;开发&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;innodb表引擎
主键索引
字段优化
explain应用
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;缓存优化&quot;&gt;缓存优化&lt;/h1&gt;

&lt;h3 id=&quot;多级缓存&quot;&gt;多级缓存&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;请求内缓存
本地缓存
分布式缓存
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;#redis
    多实例化
    内存优化
    hash使用&lt;/p&gt;

&lt;h1 id=&quot;服务器优化&quot;&gt;服务器优化&lt;/h1&gt;

&lt;h3 id=&quot;多进程&quot;&gt;多进程&lt;/h3&gt;
&lt;h3 id=&quot;减少上下文切换&quot;&gt;减少上下文切换&lt;/h3&gt;
&lt;h3 id=&quot;多路复用&quot;&gt;多路复用&lt;/h3&gt;
&lt;h3 id=&quot;减少系统调用&quot;&gt;减少系统调用&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strace统计调用次数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 14 Aug 2017 14:01:20 +0800</pubDate>
        <link>https://chchmlml.github.io/php/2017/08/14/optimization-performance-with-php.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/php/2017/08/14/optimization-performance-with-php.html</guid>
        
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>HashMap 和 HashTable 源码学习和面试总结</title>
        <description>&lt;h1 id=&quot;java集合概述&quot;&gt;Java集合概述&lt;/h1&gt;

&lt;p&gt;本文重点总结HashMap，HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。&lt;/p&gt;

&lt;p&gt;HashMap是非线程安全的，只用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。&lt;/p&gt;

&lt;p&gt;HashMap 实现了Serializable接口，因此它支持序列化。&lt;/p&gt;

&lt;p&gt;HashMap还实现了Cloneable接口，故能被克隆。&lt;/p&gt;

&lt;h1 id=&quot;hashmap介绍&quot;&gt;HashMap介绍&lt;/h1&gt;

&lt;h3 id=&quot;hashmap有四个构造方法方法中有两个很重要的参数初始容量和加载因子&quot;&gt;HashMap有四个构造方法，方法中有两个很重要的参数：初始容量和加载因子&lt;/h3&gt;
&lt;p&gt;这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（默认为16），加载因子是哈希表当前key的数量和容量的比值，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表提前进行 resize 操作（即扩容）。如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），严重浪费。&lt;/p&gt;

&lt;h1 id=&quot;关于hashmap的几个经典问题&quot;&gt;关于HashMap的几个经典问题&lt;/h1&gt;

&lt;h3 id=&quot;说下hashmap的-扩容机制&quot;&gt;说下hashmap的 扩容机制？&lt;/h3&gt;
&lt;p&gt;前面说了，hashmap的构造器里指明了两个对于理解HashMap比较重要的两个参数 int initialCapacity, float loadFactor,这两个参数会影响HashMap效率，HashMap底层采用的散列数组实现，利用initialCapacity这个参数我们可以设置这个数组的大小，也就是散列桶的数量，但是如果需要Map的数据过多，在不断的add之后，这些桶可能都会被占满，这是有两种策略，一种是不改变Capacity，因为即使桶占满了，我们还是可以利用每个桶附带的链表增加元素。&lt;/p&gt;

&lt;h3 id=&quot;hashmap的key和value都能为null么如果k能为null那么它是怎么样查找值的&quot;&gt;HashMap的key和value都能为null么？如果k能为null，那么它是怎么样查找值的？&lt;/h3&gt;
&lt;p&gt;如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。记住，key为null的键值对永远都放在以table[0]为头结点的链表中。&lt;/p&gt;

&lt;h3 id=&quot;hashmap中put值的时候如果发生了冲突是怎么处理的&quot;&gt;HashMap中put值的时候如果发生了冲突，是怎么处理的？&lt;/h3&gt;
&lt;p&gt;JDK使用了链地址法，hash表的每个元素又分别链接着一个单链表，元素为头结点，如果不同的key映射到了相同的下标，那么就使用头插法，插入到该元素对应的链表。&lt;/p&gt;

&lt;h3 id=&quot;hashtable和hashmap的区别有哪些&quot;&gt;HashTable和HashMap的区别有哪些？&lt;/h3&gt;
&lt;p&gt;HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。&lt;/p&gt;

&lt;p&gt;理解HashMap是Hashtable的轻量级实现（非线程安全的实现，hashtable是非轻量级，线程安全的），都实现Map接口，主要区别在于：&lt;/p&gt;

&lt;p&gt;1、由于HashMap非线程安全，在只有一个线程访问的情况下，效率要高于HashTable&lt;/p&gt;

&lt;p&gt;2、HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。&lt;/p&gt;

&lt;p&gt;3、HashMap把Hashtable的contains方法去掉了，改成containsValue和containsKey。因为contains方法容易让人引起误解。&lt;/p&gt;

&lt;p&gt;4、Hashtable继承自陈旧的Dictionary类，而HashMap是Java1.2引进的Map 的一个实现。&lt;/p&gt;

&lt;p&gt;5、Hashtable和HashMap扩容的方法不一样，HashTable中hash数组默认大小11，扩容方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数，增加为原来的2倍，没有加1。&lt;/p&gt;

&lt;h1 id=&quot;hashmap-和-hashtable-比较&quot;&gt;HashMap 和 HashTable 比较&lt;/h1&gt;

&lt;p&gt;HashTable同样是基于哈希表实现的，其实类似HashMap，只不过有些区别，HashTable同样每个元素是一个key-value对，其内部也是通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。&lt;/p&gt;

&lt;p&gt;HashTable 是线程安全的，能用于多线程环境中。Hashtable同样也实现了Serializable接口，支持序列化，也实现了Cloneable接口，能被克隆。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24338517&quot;&gt;源博&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 09:26:03 +0800</pubDate>
        <link>https://chchmlml.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/2017/08/08/java-hashmap.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/2017/08/08/java-hashmap.html</guid>
        
        
        <category>面试总结</category>
        
      </item>
    
      <item>
        <title>《redis设计与实践》学习</title>
        <description>&lt;h1 id=&quot;引言&quot;&gt;引言&lt;/h1&gt;

&lt;h1 id=&quot;数据结构与对象&quot;&gt;数据结构与对象&lt;/h1&gt;

&lt;h3 id=&quot;简单动态字符串-sds&quot;&gt;简单动态字符串 SDS&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redis用C的字符串作为字面量，SDS取而代之。好处
获取长度常量复杂度
杜绝缓冲溢出
减少长度修改分配内存次数
二进制安全
兼容部分C字符串
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;链表&quot;&gt;链表&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;用途较广、订阅、慢查询等
链表节点listNode结构、双向链表
链表为list结构有头尾结构信息，长度信息
头结点头指向、尾节点尾指向null
节点保存不同类型
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;字典&quot;&gt;字典&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;字典的实现是hash表
使用链表地址解决冲突 ### 跳跃表

有续集集合实现之一
层高1到32随机数
按节点值大小排序 ### 整数集合

集合的实现之一
底层数组实现，可以有序、无序，无重复的保存
升级操作节约内存
不支持降级
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;压缩列表&quot;&gt;压缩列表&lt;/h3&gt;
&lt;h3 id=&quot;对象&quot;&gt;对象&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redis的键值对的键和值都是一个对象
redis有字符串、 列表、hash、集合、有序集合五种类型，每种有至少两种以上编码
不同编码效率不同

执行命令之前会检查特定的键是否可以执行这个命令
对象都带有计数垃圾回收机制
共享0到9999的字符串对象
每次最后的访问时间会被对象记录，计算空间的回转时间
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;单机数据库实现&quot;&gt;单机数据库实现&lt;/h1&gt;

&lt;h3 id=&quot;数据库&quot;&gt;数据库&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;保存在redisserver.db中
客户端修改数据库指针，指向redisserver.db中指针切换数据库
数据库由dict、exprise组成，保存键值对和过期时间
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rdb持久化&quot;&gt;RDB持久化&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RDB文件保存和还原数据库所有数据
SAVE命令服务器进程保存操作，阻塞数据库
BSAVE子进程保存数据，不会阻塞数据库
RDB文件是二进制的
不同数据RDB保存格式不一样
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;aof持久化&quot;&gt;AOF持久化&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;·AOF文件通过保存所有修改数据库的写命令请求来记录服务器的数据库状态。
·AOF文件中的所有命令都以Redis命令请求协议的格式保存。
·命令请求会先保存到AOF缓冲区里面，之后再定期写入并同步到AOF文件。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;事件&quot;&gt;事件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redis是事件驱动
文件事件、时间事件
文件时间读时间、写事件
时间事件分为定时和周期事件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;客户端&quot;&gt;客户端&lt;/h3&gt;
&lt;h3 id=&quot;服务器&quot;&gt;服务器&lt;/h3&gt;

&lt;h1 id=&quot;多机数据库实现&quot;&gt;多机数据库实现&lt;/h1&gt;

&lt;h3 id=&quot;复制&quot;&gt;复制&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;旧版文件同步
新版支持点复制，也就是偏移量复制
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;sentinel&quot;&gt;sentinel&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;监控redis
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;集群&quot;&gt;集群&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;分片、按槽处理自己的键值
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;独立功能实现&quot;&gt;独立功能实现&lt;/h1&gt;
&lt;h3 id=&quot;发布订阅&quot;&gt;发布订阅&lt;/h3&gt;
&lt;h3 id=&quot;事务&quot;&gt;事务&lt;/h3&gt;
&lt;h3 id=&quot;lua脚本&quot;&gt;lua脚本&lt;/h3&gt;
&lt;h3 id=&quot;排序&quot;&gt;排序&lt;/h3&gt;
&lt;h3 id=&quot;二进制数组&quot;&gt;二进制数组&lt;/h3&gt;
&lt;h3 id=&quot;慢查询日志&quot;&gt;慢查询日志&lt;/h3&gt;

</description>
        <pubDate>Mon, 07 Aug 2017 11:04:42 +0800</pubDate>
        <link>https://chchmlml.github.io/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E8%B7%B5/2017/08/07/redis-learn.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E8%B7%B5/2017/08/07/redis-learn.html</guid>
        
        
        <category>redis设计与实践</category>
        
      </item>
    
      <item>
        <title>SaaS 后端即服务</title>
        <description>&lt;h1 id=&quot;阐述&quot;&gt;阐述&lt;/h1&gt;
&lt;p&gt;这篇文章阐述的是平台、系统与业务发展，面对人员、业务的发展如何处理其中要面对的问题。&lt;/p&gt;

&lt;h1 id=&quot;初创公司平台建立&quot;&gt;初创公司平台建立&lt;/h1&gt;

&lt;p&gt;可以说这是一个激烈竞争的市场，在这样的市场，&lt;code class=&quot;highlighter-rouge&quot;&gt;只有高效，有效的模式会成功的存留下来&lt;/code&gt;，而BaaS的架构就是诞生发展于移动互联网这个熔炉中并快速发展起来，成为云架构体系中重要的架构思想之一。&lt;/p&gt;

&lt;p&gt;对创业开发者来说，成本和效率是最需要关注的两个方面，&lt;code class=&quot;highlighter-rouge&quot;&gt;第一他们缺少技术的积累，第二他们需要很低的成本去验证他们的模式，从而成长起来&lt;/code&gt;。这些云服务提供者成为他们最好的选择。&lt;/p&gt;

&lt;p&gt;在这个移动互联网时代，基本会需要移动APP和web的功能，那么一下的问题我们需要解决：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;服务器部署维护&lt;/li&gt;
  &lt;li&gt;APP和Web网站开发&lt;/li&gt;
  &lt;li&gt;后端服务开发&lt;/li&gt;
  &lt;li&gt;平台功能：
    &lt;ul&gt;
      &lt;li&gt;认证和授权&lt;/li&gt;
      &lt;li&gt;文件存储&lt;/li&gt;
      &lt;li&gt;推送和通讯&lt;/li&gt;
      &lt;li&gt;地图功能&lt;/li&gt;
      &lt;li&gt;支付功能&lt;/li&gt;
      &lt;li&gt;社会化分享&lt;/li&gt;
      &lt;li&gt;验证和安全&lt;/li&gt;
      &lt;li&gt;智能识别&lt;/li&gt;
      &lt;li&gt;搜索&lt;/li&gt;
      &lt;li&gt;用户行为分析&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;业务功能&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;我们要面对的问题&quot;&gt;我们要面对的问题&lt;/h1&gt;
&lt;h3 id=&quot;系统繁多不能轻装上阵&quot;&gt;系统繁多，不能轻装上阵&lt;/h3&gt;

&lt;p&gt;然后我们又发现，好像我们没做太多事情啊，支持的业务可以数的过来，这些居然需要上百系统来支持。&lt;/p&gt;

&lt;p&gt;这后面存在的问题肯定让人深思，然后随着我们梳理的深入，会发现有些最主要的问题是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;重复建设&lt;/li&gt;
  &lt;li&gt;缺乏规划&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里对开发资源和物理资源的浪费将显而易见。&lt;/p&gt;

&lt;p&gt;这些系统也成为了一个庞大的负担，我们需要花很大的精力去维护，升级，开发，同时也要花很多公司的资源去运行，监控。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;如果一个软件变得复杂难以维护需要去做代码级别的重构，那么我们这种系统级别的复杂就需要架构级别的重构了。&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;对开发人员人手布局的考验&quot;&gt;对开发人员人手布局的考验&lt;/h3&gt;

&lt;p&gt;为什么我们做个业务系统，除了业务逻辑实现外，还需要每个开发人员掌握如此多的技能。 作为业务系统的开发人员，不是应该专注于业务逻辑的开发吗。 系统的稳定性，后端的高并发性能不是应该有更底层，更专业的团队去做吗，为什么每个开发团队都要求去做，这些不合理是由什么造成的，是分工？规划？还是技术架构？&lt;/p&gt;

&lt;h3 id=&quot;业务之间集成的标准&quot;&gt;业务之间集成的标准&lt;/h3&gt;

&lt;h1 id=&quot;我们应该专注做什么&quot;&gt;我们应该专注做什么&lt;/h1&gt;

&lt;p&gt;我们的开发团队可以很好的分工开发各种能力模块，同时业务系统可以标准化的使用这些模块。&lt;/p&gt;
&lt;h3 id=&quot;构建精细化管理&quot;&gt;构建精细化管理&lt;/h3&gt;
&lt;h3 id=&quot;系统之间集成标准的建立&quot;&gt;系统之间集成标准的建立&lt;/h3&gt;
&lt;h3 id=&quot;提高业务进化速度&quot;&gt;提高业务进化速度&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;以上是我对此文章的总结归纳，完整地址： &lt;a href=&quot;https://yq.aliyun.com/articles/2918?comefrom=http://blogread.cn/news/&quot;&gt;BaaS后端即服务 - 通往中台架构之路&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 06 Aug 2017 20:57:06 +0800</pubDate>
        <link>https://chchmlml.github.io/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2017/08/06/backend-service.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2017/08/06/backend-service.html</guid>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>每天学习笔记1</title>
        <description>&lt;h1 id=&quot;第一周&quot;&gt;第一周&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;追求自我价值之路&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;承认自己的价值，正视自己的作用
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;如何获取好点子
八个认为是好习惯的坏习惯
做个积极的悲观主义者（韩雪）&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;勇于接受挑战，不惧怕失败
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;我为什么做一个黑客&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;从突破中找到乐趣，在互联网上为年轻人简历正确的道德观   
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;第二周&quot;&gt;第二周&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;《redis设计与实现》&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;类型概要，SDS simple dynamic string
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;《redis设计与实现》&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;字典模型，跳跃表
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;性格迷思 &amp;gt; 你究竟是谁&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;人性格可以分为内省与外向，按其表现形式；但是不能笼统贴出每个人的标签，真正做自己才是自己
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;对自己好 认识你自己&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;为什么我要看这个 月亮杯？
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;邓乐普谈对人生的热情&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;第三周&quot;&gt;第三周&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;定位自我的意义&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;请求的艺术&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;请求需要沟通，交流
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;第四周&quot;&gt;第四周&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;20170907&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000010748235?utm_source=weekly&amp;amp;utm_medium=email&amp;amp;utm_campaign=email_weekly&quot;&gt;php的坑&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;字符串==比较的强类型转换&lt;/li&gt;
  &lt;li&gt;array_merge vs +&lt;/li&gt;
  &lt;li&gt;浮点数精度问题，比较带来的问题&lt;/li&gt;
  &lt;li&gt;in_array 强类型转换&lt;/li&gt;
  &lt;li&gt;strpos第二个参数不是string，直接返回&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用MySQL的朋友们请不要使用”utf8”，请使用”utf8mb4”&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; MySQL中的“utf8”编码只支持最大3字节每字符。真正的大家正在使用的UTF-8编码是应该能支持4字节每个字符。MySQL的开发者没有修复这个bug。他们在2010年增加了一个变通的方法：一个新的字符集“utf8mb4”
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 01 Aug 2017 13:13:26 +0800</pubDate>
        <link>https://chchmlml.github.io/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2017/08/01/everyday-learn-1.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2017/08/01/everyday-learn-1.html</guid>
        
        
        <category>学习笔记</category>
        
      </item>
    
      <item>
        <title>Stacer Linux监控系统</title>
        <description>&lt;p&gt;想看看源码来着，作为后端学习意义不大，实际应用更大。&lt;/p&gt;

&lt;h1 id=&quot;stacer&quot;&gt;Stacer&lt;/h1&gt;

&lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;针对linux服务器监控，主要是Ubuntu&lt;/li&gt;
  &lt;li&gt;系统概要监控，整体运行、文件状态&lt;/li&gt;
  &lt;li&gt;支持插件、服务&lt;/li&gt;
  &lt;li&gt;进程监控&lt;/li&gt;
  &lt;li&gt;资源监控&lt;/li&gt;
  &lt;li&gt;多语言系统支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;项目地址&quot;&gt;项目地址&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/oguzhaninan/Stacer&quot;&gt;https://github.com/oguzhaninan/Stacer&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 30 Jul 2017 14:45:03 +0800</pubDate>
        <link>https://chchmlml.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%89%8D%E7%AB%AF/2017/07/30/stacer.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%89%8D%E7%AB%AF/2017/07/30/stacer.html</guid>
        
        
        <category>服务器</category>
        
        <category>前端</category>
        
      </item>
    
      <item>
        <title>网络爬虫技术总结</title>
        <description>&lt;h1 id=&quot;基本原理&quot;&gt;基本原理&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），
是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还
有蚂蚁、自动索引、模拟程序或者蠕虫。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我这里说的爬虫则是相对狭义，作为开发，自己做爬虫爬去资料无疑是很有成就感的。&lt;/p&gt;

&lt;h1 id=&quot;爬虫的工作流程&quot;&gt;爬虫的工作流程&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;准备种子URL；&lt;/li&gt;
  &lt;li&gt;将这些URL放入待抓取URL队列；&lt;/li&gt;
  &lt;li&gt;从待抓取URL队列中取出待抓取在URL，解析DNS，并且得到主机的ip，并将URL对应的网页下载下来，存储进已下载网页库中。此外，将这些URL放进已抓取URL队列。&lt;/li&gt;
  &lt;li&gt;分析已抓取URL队列中的URL，分析其中的其他URL，并且将URL放入待抓取URL队列，从而进入下一个循环；&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;要解决的问题&quot;&gt;要解决的问题&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;要获取我们只定的信息，所以可以指定我们需要的格式来定义目标也，通过DOM解析技术从缓存的页面提炼信息，保存指定信息；&lt;/li&gt;
  &lt;li&gt;效率是个大问题，多线程、分布式技术的应用很重要；&lt;/li&gt;
  &lt;li&gt;递归的获取url地址是个类似图数据结构，以何种方式抓取url成为抓取策略，其中有&lt;code class=&quot;highlighter-rouge&quot;&gt;深度优先遍历策略&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;宽度优先遍历策略&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;反向链接数策略&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;PageRank策略&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;相关资料&quot;&gt;相关资料&lt;/h1&gt;
&lt;p&gt;java、python、Node.js、Go语言因为多线程、协程的支持，非常适合做爬虫语言；php应用多进程方式也可作为爬虫的应用。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/owner888/phpspider&quot;&gt;php爬虫&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;PHP, Python, Node.js 哪个比较适合写爬虫？&quot;&gt;PHP, Python, Node.js 哪个比较适合写爬虫？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 30 Jul 2017 13:58:34 +0800</pubDate>
        <link>https://chchmlml.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2017/07/30/about-crawler-technology.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2017/07/30/about-crawler-technology.html</guid>
        
        
        <category>服务器</category>
        
        <category>关于网络爬虫</category>
        
      </item>
    
      <item>
        <title>信息加密技术总结</title>
        <description>&lt;h1 id=&quot;开发中的信息加密&quot;&gt;开发中的信息加密&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;加密技术作为安全保密措施，是最常用的安全保密手段，利用技术手段把重要的数据变为乱码（加密）传送，
到达目的地后再用相同或不同的手段还原（解密）。加密技术的应用是多方面的，但最为广泛的还是在电子
商务和VPN上的应用
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;加密技术分类&quot;&gt;加密技术分类&lt;/h1&gt;
&lt;p&gt;加密技术根据其实现，主要分为&lt;code class=&quot;highlighter-rouge&quot;&gt;对称加密&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;非对称加密&lt;/code&gt;，但是大家熟知的MD5、sha算法不是加密技术，属于&lt;code class=&quot;highlighter-rouge&quot;&gt;单线散列摘要&lt;/code&gt;算法，不可逆算法。&lt;/p&gt;

&lt;h1 id=&quot;对称加密&quot;&gt;对称加密&lt;/h1&gt;
&lt;p&gt;所谓对称加密，就是加密和解密使用同一秘钥，这也是这种加密算法最显著的缺点之一。上面的字典、圣经等也可以理解为是一份秘钥。现代的加密算法中，DES、3DES、AES等算法都属于对称加密算法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点：效率高&lt;/li&gt;
  &lt;li&gt;缺点：密钥传输不确定性，一单密钥泄露，就造成加密的失败&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;非对称加密&quot;&gt;非对称加密&lt;/h1&gt;
&lt;p&gt;这种加密算法的秘钥分为公钥和私钥，公开秘钥用于对信息进行加密，而解密时使用私有秘钥进行解密，信息发送方使用公钥对信息进行加密，然后将信息发送给接收方，接收方使用私钥进行解密即可。常见的非对称加密算法有：RSA、EIGamal、背包算法、Rebin（RSA的特例）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点：相对于对称加密安全&lt;/li&gt;
  &lt;li&gt;缺点：效率低&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;单线散列摘要&quot;&gt;单线散列摘要&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;单向散列算法，又称hash函数，Hash函数（也称杂凑函数或杂凑算法）就是把任意长的输入消息串变化
成固定长的输出串的一种函数。这个输出串称为该消息的杂凑值。一般用于产生消息摘要，密钥加密等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;常见散列函数(Hash函数)有：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MD5（Message Digest Algorithm 5）：是RSA数据安全公司开发的一种单向散列算法，MD5被广泛使用，
可以用来把不同长度的数据块进行暗码运算成一个128位的数值。
SHA（Secure Hash Algorithm）这是一种较新的散列算法，可以对任意长度的数据运算生成一个160位的数值。
MAC（Message Authentication Code）：消息认证代码，是一种使用密钥的单向函数，可以用它们在系统上或
用户之间认证文件或消息，常见的是HMAC（用于消息认证的密钥散列算法）。
CRC（Cyclic Redundancy Check）：循环冗余校验码，CRC校验由于实现简单，检错能力强，被广泛使用在各种
数据校验应用中。占用系统资源少，用软硬件均能实现，是进行数据传输差错检测地一种很好的手段（CRC 并不是严格
意义上的散列算法，但它的作用与散列算法大致相同，所以归于此类）。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(摘录于百度)&lt;/p&gt;

&lt;h1 id=&quot;https中对加密技术的应用&quot;&gt;https中对加密技术的应用&lt;/h1&gt;
&lt;p&gt;https通信双方建立通信后，A首先生成一对公钥和私钥，并将公钥发送给B，B使用公钥将一个对称加密算法的“秘钥+有效期”加密后，再发回给A，A使用私钥解密后，双方便同步了一个对称算法的秘钥，然后在规定的有效期内，双方便可以使用这个秘钥对通信数据进行加密和解密。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;总结起来：非对称加密传输的是加密算法；对称加密传输的是信息。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 15 Jul 2017 15:43:36 +0800</pubDate>
        <link>https://chchmlml.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2017/07/15/about-encryption-technology.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2017/07/15/about-encryption-technology.html</guid>
        
        
        <category>服务器</category>
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>关于职业的困惑和探讨</title>
        <description>&lt;h1 id=&quot;我的职业经历&quot;&gt;我的职业经历&lt;/h1&gt;

&lt;p&gt;2011年怀着惊喜与忐忑，来到了上海漕河泾，成为毕业生实习的光荣一员。当时的公司PPS对自己来说还是很满意的，毕竟自己的学校与能力能顺利的找到工作还是知足的，漫漫工作路只是开始，在漕河泾一待就是三年多，里面的坎坷、温馨、困难自然如同生活一样不期而遇又不出意料。应该要感谢这份工作，从中理解生活与自我塑造的收获相比作为一名技术人员来说，更多而且丰富。&lt;/p&gt;

&lt;p&gt;随着时间的进行，工作与生活的迷茫渐渐使自己不知所措。就如这浮躁的社会一样，离开重新开始也是顺应潮流了。所以我做了个至今不知道正确与否的决定，加入去做一份完全不可能成功的工作，美其名曰叫创业，甚至连自己否不知道这两个字的意义。&lt;/p&gt;

&lt;p&gt;至少生活还是公平的，不会轻易放弃任何一个人，在诡异的结束了这个邮轮海的项目，我又一次似乎是被命运驱使的前行，来到了jd。从pps到jd，整整三年时间，自己的技术并没有显著提高，同时可能也错过了自己最该成长的日子。可是至少对于生活的领悟人、更加准确，明白如何面对自己、面对生活。&lt;/p&gt;

&lt;p&gt;2015来到北京，我觉得这次是对自己的反省，承认自己的失败，对之前的日子彻底推翻重来。对自己的要求只有放低一切，重新塑造。是不是该感谢自己能承认之前的失误呢，不清楚，至少浪费了时间要自己争取回来，丢掉的自尊要自己拾起来，失去的快乐要慢慢先把伤口抚平起来。&lt;/p&gt;

&lt;h1 id=&quot;遇到的问题&quot;&gt;遇到的问题&lt;/h1&gt;
&lt;p&gt;来北京之前，虽然忐忑，但是对自己的技术还是相对自信的，可是面试的时候确实碰了不少壁，也曾经十分消沉，不知道这究竟是怎么回事。&lt;/p&gt;

&lt;p&gt;后来也花一段时间思考原因，毕竟对自己的问题，钻牛角尖的时候还是挺多的，先记下来吧。&lt;/p&gt;

&lt;p&gt;归纳起来，我觉得自身的问题可是技术方面的，长久以来自己对技术都是相对宽泛的学习，追求广度而缺乏精度，从后端到前端都学习，但是由于职业的进展跟技术的进步很贴近，杂而不够深入，所以较真的问题不行；缺乏周期性的归纳，不能牢靠的吸收可能是专业性较强的专业都怕的，甚至于生活，老祖宗早就告诉我们：“吾日三省吾身，为人谋而不忠乎？与朋友交而不信乎？传而不习乎”；缺乏对于人性的洞察，可能说来有些玄，可是事实就是所有事都是跟人打交道，把事情想的简单或者复杂终究不能成事，自身的发展不迎合身边的一切终究不成功。&lt;/p&gt;

&lt;h1 id=&quot;关于技术的学习&quot;&gt;关于技术的学习&lt;/h1&gt;
&lt;p&gt;职业的迷茫在于缺乏成长带来的危机感，技术成长停滞更加明显。&lt;/p&gt;

&lt;p&gt;曾经我不断追求新的东西，并且贴近于实践，使得很长一段时间所有的理解仅限于知其然不知所以然，后来渐渐改掉这个毛病。&lt;/p&gt;

&lt;p&gt;但是面对海量的技术，而且不断出现的新技术，很难保持长久的动力对所有的东西进行学习。&lt;/p&gt;

&lt;p&gt;渐渐的明白我的做法或者着说方向是有问题的，毕竟做万金油不能保持上面所说的长久的上升动力，所以我希望以后对于技术学习保持：
1、对知识的透彻理解 2、对某一方向的深入精通 3、对未知的敬畏。&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Jul 2017 14:13:04 +0800</pubDate>
        <link>https://chchmlml.github.io/%E6%84%9F%E6%82%9F/2017/07/14/my-life-stage-summury.html</link>
        <guid isPermaLink="true">https://chchmlml.github.io/%E6%84%9F%E6%82%9F/2017/07/14/my-life-stage-summury.html</guid>
        
        
        <category>感悟</category>
        
      </item>
    
  </channel>
</rss>
